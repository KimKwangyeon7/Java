과목평가 - 과목 끝났을때: 객관, 논/서술, 알고리즘
싸피 매주 월요일에 시험

매 월말평가 5회

과목 7회, 월말 3회, sw A형 통과해야함
싸피는 10회 정도?

프로젝트 활동이 끝나더라도 그것을 어떤식으로 보완할지도 생각해보고 해보기

사회적 문제 해결
로봇 만들기
게임 만들기

자바 9일
알고리즘 3주
8월 말쯤 역량평가 예정

프론트엔드 - 자바스크립트, 부트스트랩 ... (총 6일)

데이터베이스

벡엔드 - sublet jsp (총 5일)

알고리즘 심화

스프링 프레임워크
+ 스프링부트
+ DB 관련 프레임워크 - 마이베티스

Vue
이후 2학기에는 리액트



## 폴더 구조: 표준 준수

- 기본폴더: C:\SSAFY
- 다운로드: C:\SSAFY\down_apps ( 크롬설정에서 다운로드시 폴더 확인하는 설정 - 깔끔하게 폴더 정리)
- C:\Program Files\Zulu\zulu-8: JDK 설치 기본 폴더
- C:\SSAFY\eclipse: eclipse 압축해제
- C:\SSAFY\tomcat: tomcat 압축해제
- C:\SSAFY\sts-bundle: sts 압축해제

- C:\SSAFY\API: 도움말 위치
- C:\SSAFY\workspace: 과목별 작업 폴더

## Java 개발환경

1. JDK: 
-- Oracle JDK: 유료
-- Open JDK: 오픈소스(zulu-1.8.0_192) 8.33.0.1
-- api documentation: java 도움말
-- C:\Program Files\Zulu\zulu-8\bin>
     => javac.exe: 컴파일러
     => java.exe: 인터프리터(실행)
     => javadoc.exe: api 문서 생성기
     => jarc.exe: class 묶음(압축), *.jar, *.war, *.ear 

2. Eclipse: IDE(통합개발환경)
-- 2018-09-R (Eclipse 4.15 - JDK8을 지원)
-- https://www.eclipse.org/downloads/packages/release/2018-09/r
-- Eclipse IDE for Java EE Developers

3. STS: Spring Tool Suite
-- 3.9.14(Eclipse 4.15)
-- https://spring.io/
-- https://github.com/spring-attic/toolsuite-distribution/wiki/Spring-Tool-Suite-3

4. Tomcat
-- WAS (Web Application Server)
-- https://tomcat.apache.org/
-- Tomcat 9.x

* 압축 해제와 설치의 경우 압축 해제하는 것을 권장


## 개발 환경 설정

1. JDK 
-- 신규: JAVA_HOME = C:\Program Files\Zulu\zulu-8
-- 추가변경: path = %JAVA_HOME%\bin;기존패스
-- 윈도우 > 제어판 > 고급 시스템 설정 > 환경변수 > 시스템 변수

2. 한글인코딩
-- euc-kr (ksc5601) : 한글, 영문 
-- utf-8 : 한글, 영문 등 다국어, html5, ajax

-- 인코딩 설정 범위: eclipse, workspace, project, file
-- C:\SSAFY\eclipse> eclipse.ini:
    >> 추가: -Dfile.encoding = UTF-8
-- C:\SSAFY\sts-bundle\sts-3.9.14.RELEASE> sts.ini
    >> 추가: -Dfile.encoding = UTF-8

## Eclipse Project
1. new workspace
2. new project
    -- out dir: 01.java_basic/classes

3. switch workspace
4. exist import project


## 자바 프로그래밍
1. 소스코드 작성: 파일명.java

2. 컴파일 방법:
    dos> javac <options> 파일명.java
    dos> javac <options> *.java

    => 클래스파일명. class: byte code (jvm 번역 기계어)
    
    eclipse> 소스코드 저장하면 자동 컴파일됨



3. 실행방법
    dos> java <options> 실행 메서드가 있는 클래스명
    dos> java <options> 패키지명.패키지명.실행 메서드가 있는 클래스명

    eclipse> 단축키(Crtl+F11), Run > Java Application


## 자바 특징
-- 객체 지향: OOP
-- 객체 지향 특징
    1. 추상화(abstraction) - 중요한 정보 추출 
    2. 은닉성(encapsulation)
    3. 상속(inheritance)
    4. 다형성(polymorphism)

-- 객체(Object) => 그 프로그램에서 관리해야 할 모든 것(같은 객체라도 속성과 기능 다를 수)
    >> 현실 세계 존재하는 사물, 개념
    >> 속성과 기능으로 구성
    
    >> 그 프로그램에서 관리해야 할 모든 것(대상이 되는 모든 것)
    >> 속성: 값(변수)
    >> 기능: 행위(메서드)
    >> 동일한 객체(예시: 사고 팔 때의 자동차)라도 어떤 프로그램의 대상인지에 따라 속성/기능은 달라짐!


## 자바의 데이터 타입

1. 기본형
-- 정수형: byte(8 bit), short(16), int(32-기본), long(64) 
    >> 5 : int 타입
    >> 5L, 5l : long 타입

-- 실수형: float(32), double(64-기본)
    >> 5.0, 5.0D, 5.0d : 생략 가능
    >> 5.0f, 5.0F
float: 32bit,  정밀도 소수 이하 8자리(9자리에서 반올림 처리)
double: 64bit, 정밀도 소수 이하 17자리(18자리에서 반올림)


-- 논리형: boolean 
    >> 참: true 
    >> 거짓: false

-- 단일문자형: char(16bit, 2byte)
    >> 모든 문자 표현 가능
    >> '가', 'a' (작은 따옴표 사용)

2. 참조형(객체형)
-- 모든 클래스(인터페이스) : 표준 api, 오픈소스, 사용자 정의 api 등
-- 배열(array)
-- 문자열: String, StringBuffer, StringBuilder

객체 내의 속성 -> 도메인 -> 데이터 타입 결정


형 변환 -> 자동 형 변환, 명시적 형 변환
## 형변환(type casting)
-- 자동 형변환
    >> 작은 타입의 데이터는 큰 데이터 타입의 기억 공간에 자동 할당
    >> byte => short / char => int => long => float => double 
    >> boolean은 형변환 되지 X : 값의 크기를 갖는 것이 아닌 참/거짓을 의미하는 타입!

    >> 객체형(상속): 자식타입(sub class) => 부모타입(super class)

-- 명시적 형변환
    >> 개발자가 명시적으로 형변환 지정
    >> 값의 유실이 발생할 수 있음
    >> 타입 변수명 = (타입)값;

// 산술 이항 연산자는 산술 전에 두 연산자의 타입을 일치시킨다
// 피연산자의 크기가 4 byte(int) 미만이면 int로 변경한 후 연산 진행
// 두 개의 피연산자 중 큰 타입으로 형 변환 후 연산 진행


## 연산자
1. 할당 연산자(=)
    타입 변수명 = 값; 
    => 값, 변수명, 수식, 결과값 반환하는 메서드 호출문(), new 클래스명()
    => 수행순서:
        (1) 우측 연산
        (2) 우측 연산 결과에 대한 타입 결정
        (3) 좌측 저장 기억 공간의 타입과 우측 연산 결과 타입을 체킹
            >> 같은 타입이면 자동 할당
            >> 좌측 저장 기억 공간이 큰 타입이면 자동 형변환 할당
            
            >> 다른 타입이면 컴파일 오류 발생
            >> 다른 타입이어도 명시적 형변환을 통해 할당 가능

## 자바 주석문(comment)
1. // 한줄 주석문
2. /* 여러줄 주석문 */

3. api 문서 주석문
-- 선언위치: 클래스 선언문, 멤버변수 선언문, 생성자 선언문, 메서드 선언문 앞에 위치
-- 선언형식: /** api 주석 내용 */ 
-- api 주석 내용
    >> 텍스트
    >> html 태그 : <pre> 작성한 내용을 그대로 보여줌 </pre>
    >> api 문서 전용 어노테이션
        @author 작성자이름
        @version ver.1.0
        @param 메서드 또는 생성자의 매개변수명 설명
        @return 메서드 반환값에 대한 설명
        @... : eclipse 자동목록 추천


## 변수 종류
1. 멤버 변수
-- 클래스의 멤버 선언

2. 지역 변수
-- 메서드, 생성자, 제어문 내부에 선언


## 변수의 범위
-- { ..scope.. }


## 변수 선언 방법
형식1: 제어자 타입 변수명;
형식2: 제어자 타입 변수명 = 명시적 초기값;


## 변수의 값 할당: 반드시 먼저 변수가 선언이 되어 있어야 함!
변수명 = 값 | 변수명 | 수식 | 결과값을 반환하는 메서드 호출() | new 클래스명() 


## 제어자
1. access modifier: 접근 제한 (4가지 중에서 1개만 지정)
-- public: universe
-- protected: sub class(상속)
-- 생략(package, default, friendly): same package
-- private: same class

2. usage modifier (non-access modifier): 사용 제어
-- static: 객체 생성하지 않고 사용 가능한 멤버 ex) 클래스명.static멤버명
-- final
-- abstract
-- ...


## 자바 프로그래밍 주의사항
-- 대소문자 구분: 이름 규칙 준수(권장)
-- 명령문의 끝은 ";" 세미콜론
-- { } 짝을 이루어야 함
-- 시작메서드 형식: public static void main(String[] args) { }

## 이름규칙(명명 규칙: Naming convention)
-- 길이 제한없음, 의미있게 지정, 영문자(유니코드), 특수문자(_,$) 시작 + 숫자 조합 사용(숫자 시작 불가)
-- 공백불가, 키워드(예약어) 사용불가

-- 클래스명: 대문자 + 대문자시작
-- 변수명: 소문자 + 대문자시작 
-- 메서드명: 소문자 + 대문자시작()
-- 패키지명: 모두소문자.모두소문자.모두소문자
-- 상수명: 모두대문자_모두대문자


## 키워드(예약어)
-- 모두 소문자: public, class, static, if, for
-- sizeof: 키워드 X (식별자로 사용하지 말자)
-- const: 키워드 O (식별자로 사용 불가, 지원하지는 않음 => 상수는 final로 사용함)


++ 코딩 날짜 출력 (다양한 출력형태)



과제 : 알고리즘 문제 1개 풀기




배열: 동일한 타입 + 연속된 메모리 공간


String을 char 배열로 바꾸기 -> toCharArray

연산의 기본은 int
ex) byte b1 = 5
    byte b2 = 10
    byte res = b1+b2 => 오류
    
작은 타입 -> 큰 타입(자동 형변환)
큰타입-> 작은타입일 때, int 기준으로 작을 경우는 값을 할당할 때 자동 형변한

__________________________________________________________________________________________________________________
7/17

## Array(배열)
-- 자료 저장 구조
-- static collectio: 크기 고정(immutable)
    >> 자동 확장 불가
    >> CRUD 관련 기능 (메서드) 제공 없음
    >> 기본형, 객체형
    >> 다형성(Polymorphism)

-- 다차원 배열
    >> 1차원
    >> 2차원
    >> 3차원
    >> ..

-- 배열관련 예외 클래스: ArrayIndexOutOfBoundsException
    >> 배열요소를 잘못 접근한 경우에 발생되는 예외

-- 사과쟁반: 사과만 담아야 함
-- 과일쟁반: 모든 과일 담기(사과, 딸기, 수박)
-- 쟁반: 과일, 장난감, 책

## Modifiers(제어자)
1. 접근제한자: Access Modifiers
(1) +: public (universe)
(2) #: protected (sub-class)
(3) 생략: package, default, friendly (same-package)
(4) -: private (same-class) 

-- class: public, default
-- 멤버변수: public, protected, default, private
-- 메서드: public, protected, default, private
-- 생성자: public, protected, default, private

-- 지역변수, 매개변수
    >> 선언위치: 생성자 매개변수, 생성자 내부, 메서드 매개변수, 메서드 내부, 제어문 내부
    >> default만 가능

2. 사용제어자: Usage Modifers (Non-Access Modifiers)
(1) static: 객체 생성하지 않고 사용가능 ex) 클래스이름.static메서드이름(), 클래스이름.static멤버변수명
(2) abstract
(3) final
(4) ...


## 1차원 배열: Lotto645.java
1. 선언
    [modifiers] 타입[] 배열명;
    [modifiers] 타입 배열명[];
    
2. 배열 객체 생성 및 할당
3. 배열 요소 값 사용: 할당, 변경, 조회
    -- 배열 요소 인덱스 시작: 0
    -- 배열 요소 인덱스 최대: 배열크기 - 1

    배열명[배열요소인덱스] == 값;

-- 방법2:
1. 선언 + 2. 배열객체생성 및 할당
[modifiers] 타입[] 배열명 = new 타입[배열크기];

-- 방법3:
1. 선언 + 2. 배열객체생성 + 3. 명시적 초기값 할당
(1) [modifiers] 타입[] 배열명 = new 타입[]{값1, 값2, 값3, ...};
(2) [modifiers] 타입[] 배열명 = {값1, 값2, 값3, ...}; (cf. 따로 하면 에러, (1)처럼 할 거 아니면 동시에 해야함)

## new 키워드
1. 배열 객체 생성 순서
(1) 메모리 할당
(2) 기본값 자동 초기화
(3) 명시적 초기화: 선택
(4) 배열 객체에 대한 참조 값을 할당


2. 객체 생성 
 

## 자바 데이터 타입 기본값
1. 정수형: 0
2. 실수형: 0.0
3. 논리형: false
4. 단일문자형: 공백문자, '\u0000'
5. 객체형: null (String 역시 null)


## 다차원 배열: 2차원 배열
-- 행과 열로 구성된 배열
-- 2차원배열명.length 변수에는 행크기가 저장된 변수
-- 2차원배열명[행번호].length 변수에는 해당 행의 열크기가 저장된 변수


-- 방법1:
    (1) 선언: 
        타입[][] 2차원 배열명;
        타입 2차원배열명[][];
    
    (2) 생성: 행마다 열의 크기가 동일
        2차원배열명 = new 타입[행크기][열크기];

        생성: 행마다 열의 크기가 각각 다르게 지정
        2차원배열명 = new 타입[행크기][];
        2차원배열명[행번호] = new 타입[해당행의열크기];

    (3) 요소 사용
        2차원배열명[행번호][열번호] = 값;

-- 방법2:
    (1) 선언 + (2) 생성
        타입[][] 2차원배열명 = new 타입[행크기][열크기];

-- 방법3:
    (1) 선언 + (2) 생성 + (3) 명시적 초기화
        타입[][] 2차원배열명 = { {1, 2, 3}, {10, 20}, {23, 15, 451, 44} };

출력형식 지정 출력: 지정한 형식 기반으로 출력만 함 / 즉, 라인이동 X
sysout.printf("", args...)
-출력크기 지정
-정렬기준 지정: 기본 오른쪽 정력, -(왼쪽)
- 실수의 경우 소수이하 자리수 지정
- 형식: %[플래그][자리수][.정밀도][서식]

- %d: 정수
- %f: 실수
- %s: 문자열
- %b: boolean
- %c: char
- %0: 8진수
- %0x: 16진수
- %e: 지수 표현식



