## 예외 처리
- checked Exception: 예외에 대한 대처 코드 없으면 컴파일 X
- Unchecked Exception: 일단 컴파일은 진행

--  try ~ catch 구문
try {
  // 예외가 발생할 수 있는 코드
}
catch(XXException e){ // 던진 예외를 받음
  // 예외가 발생했을 때 처리할 코드
}

-- Exception 객체의 정보 활용
  >> Throwable의 주요 메서드
    - public String getMessage()
    - public Throwable getCause()
    - public void printStackTrace()

-- try-catch문에서의 흐름
  >> try 블록에서 예외가 발생 -> JVM이 해당 Exception 클래스의 객체 생성 후 던짐(throw)
     -> 던져진 exception을 처리할 수 있는 catch 블록에서 받은 후 처리 -> 정상적으로 처리되면 try-catch 블록을 벗어나 다음 문장 진행
     -> 어떠한 예외도 발생하지 않은 경우 catch문을 거치지 않고 다음 문장 진행

-- 다중 exception handling => 다형성(매개변수 작은 범위에서 큰 범위)

-- try ~ catch ~ finally 구문을 이용한 예외 처리
  - finally 는 예외 발생 여부와 상관 없이 언제나 실행
    - 중간에 return을 만나는 경우도 finally 블록을 먼저 수행 후 리턴 실행


-----------------------------------------------------------------------------------------------------
** 요약노트 - 키워드 위주로 간단하게 (예제까지 만들어서)


-- 예외:
    >> 프로그램 수행 중에 발생하는 문제(오류), 예기치 못한 상황 발생
	>> 예외 발생은 수행문 수행 중에 발생됨
		=> 메서드 수행 시에
		=> 생성자 수행 시에
-- 예외 처리
	>> 예외 발생에 대한 처리 로직
	>> 예외 처리를 하지 않으면 프로그램이 강제 종료
		=> 발생한 예외 메세지와 예외 트래킹 정보를 출력
			=> getMessage(): String
			=> printStackTrace(): void - 개발 시에 디버깅 목적으로 사용!

	1. 직접 예외 처리 하는 방법: 메서드 또는 생성자 정의 시에 직접 예외 처리
		
		(1) try {
				// 예외 발생 가능한 수행문
			} catch(자식-예외클래스이름1 참조변수명) {
				// 자식-예외클래스이름1 발생시 예외 처리 수행문

			} catch(부모-예외클래스이름1 참조변수명) {
				// 부모-예외클래스이름1 발생시 예외 처리 수행문

			} catch(Exception 참조변수명)
				// 공통 예외처리: S/W 처리 가능한 최상위 예외 클래스
				// 실제 발생한 예외 클래스 이름: 
				// java.lang.Object#getClass(): Class 
				// java.lang.Class#getSimpleName()

			}
		(2) try {

		    catch () {

		    ) finally {
		      	// 정상수행, 예외 발생 시 모두(반드시) 수행해야하는 수행문
			// 주로 자원 해제: close()
			// 반드시 수행해야 하는 로직이지만 경우에 따라 수행이 되지 않을 수 있음
			// 1. 프로그램 강제 종료: System.exit(int);
			// 2. finally 수행 중에 예외 발생하는 경우

		(3) 코드 상으로는 가능하지만 실제 catch 구문이 없으므로 예외 발생 시에 처리되지 않음
		    try {

		    } finally {

		    }
		
		(4) jdk1.7 추가: try with resource
		    -- 자동으로 자원에 대한 해제 수행
		    -- 
		    try( 자원객체생성 수행문; ){
			

	2. 예외 처리를 전가시키는 방법: 메서드를 호출하는 호출측에게 예외 처리를 위임
		=> 메서드를 호출하는 호출측에게 예외 처리를 위임
		=> 메서드 선언문 또는 생성자 선언문에 발생 가능한 예외를 표기해야함

		[modifier] 반환타입 메서드명 (args) throws 예외클래스이름1, 예외클래스이름x { }
		[modifier] 클래스이름 (args) throws 예외클래스이름1, 예외클래스이름x { }

-- 예외 API
	>> java.lang.Throwable: getMessage(): String, printStackTrace(): void
	>> Error:
		=> H/W 문제, 개발자 예외 처리 불가한 오류, power off, cpu fail 등
	>> Exception:
		=> S/W 예외, 개발자 예외 처리 가능한 예외, 
		=> NullPointerException, ClassCastException, ArrayIndexOutOfBoundsException 
		=> IOException, EOFException, SQLException
	
	>> RuntimeException
		=> NullPointerException, ClassCastException, ArrayIndexOutOfBoundsException
	>> non-RuntimeException (super: Exception)
		=> IOException, EOFException, SQLException

-- 종류:
	1. checked exception
		>> non-RuntimeException (super: Exception)
		>> IOException, EOFException, SQLException
		>> javac(컴파일) 시점에서 예외 처리 체킹함!
		>> 예외 처리 필수: 예외 처리하지 않으면 javac 컴파일하지 않음(컴파일 오류 메세지 출력)

	2. un-checked exception
		>> RuntimeException
		>> javac(컴파일) 시점에서 예외 처리 여부를 체킹하지 않음
		>> 예외 처리 선택

## 사용자 예외 클래스 정의 방법(규칙)
1. extends Exception
	>> checked exception
	>> 반드시 예외 처리를 해야함

2. super("예외메세지";)

3. class 구성요소 필요시 추가: 멤버변수, 메서드, 생성자 중복정의 등


## 개발자가 명시적으로 예외를 발생시키는 방법
-- 목적: 개발 시에 예외 처리 테스트, 사용자 정의한 예외 발생
-- 형식: 
	throw new 예외클래스이름();
	throw new 예외클래스이름(params);












-------------------------------------
else {
						int[] next = {xx, yy};
						
						if (board[xx][yy] == 0) { // 장애물이 없을 때
							qu.offer(next);
							visit[xx][yy] = true;
						}
						if (board[xx][yy] == 2) {
							if (time % 3 == 2) { // 소용돌이가 없을 때
								qu.offer(next);
								visit[xx][yy] = true;
							}
							else {
								qu.offer(tmp); // 소용돌이가 끝날 때 다시 가는 경우가 있으므로 poll한 tmp를 다시 넣어줌
								continue;
							}
						}
					}

____________________________________________________________________________________________________________
/**
 * 
 */
package swea_algorithm;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

/**
 * @author SSAFY
 *
 */
public class algorithm_0724 {

	/**
	 * @param args
	 */
	static int N;
	static int[][] board;
	static int[] A = new int[2];
	static int[] B = new int[2];
	static int[] dx = {0, 1, 0, -1};
	static int[] dy = {1, 0, -1, 0};
	static boolean[][] visit;
	
	
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		StringBuilder sb = new StringBuilder();
		
		int T = Integer.parseInt(br.readLine());
		
		for (int tc = 1; tc <= T; tc++) { // 테케 시작
			int N = Integer.parseInt(br.readLine()); // 수영장의 크기를 변수 N에 담음
			visit = new boolean[N][N]; // 2차원 배열 visit의 크기를 지정하고 값도 false로 초기화
			board = new int[N][N];
			
			for (int i = 0; i < N; i++) { // 2차원 배열 board에 수영장 모양을 담음
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					board[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			
			st = new StringTokenizer(br.readLine());// 시작점 받기
			A[0] = Integer.parseInt(st.nextToken());
			A[1] = Integer.parseInt(st.nextToken());	
			
			st = new StringTokenizer(br.readLine());// 도착점 받기
			B[0] = Integer.parseInt(st.nextToken());
			B[1] = Integer.parseInt(st.nextToken());
			
			if (A[0] == B[0] && A[1] == B[1]) {
				sb.append(0);
				continue;
			}
			
			Queue<int[]> qu = new LinkedList<>(); // 이동 경로를 담을 큐 생성
			qu.offer(A); // 우선 시작점을 담고 방문 처리
			visit[A[0]][A[1]] = true;
			int time = 0; // 걸린 시간을 표현하기 위해 time 변수 초기화
			int res = 0;
			int[] ans = new int[2];
			sb.append("#").append(tc).append(" "); // 출력할 문자열 sb에 저장
			
			while (!qu.isEmpty()) {
				int b = qu.size();
				for (int i = 0; i < b; i++) {
					int[] tmp = qu.poll(); // 큐에서 원소를 빼며 그 값을 tmp에 저장
					
					for (int k = 0; k < 4; k++) {
						int xx = tmp[0] + dx[k];
						int yy = tmp[1] + dy[k];
						
						if (!isBoundary(xx, yy) || !visit[xx][yy] || board[xx][yy] == 1) { // 경계에서 벗어나거나 이미 방문한 곳이거나 
								continue;														   // 장애물이 있는 곳인 경우 제외				
						}
						if (xx == B[0] && yy == B[1]) { // 도착지인 경우 그 시간을 출력하기 위해 sb에 쌓고 for문과 while문을 나감
							time++; // 모든 이동이 끝났을 때 도착지에 갈 수 있는지 확인하기 위해 설정
							qu.clear();
							break;
						}
						if (board[xx][yy] == 2) {
							if (time % 3 != 2) {
								qu.offer(tmp);
								continue;
							}
						}
						int[] next = {xx, yy};
						visit[xx][yy] = true;
						qu.offer(next);
				}
				time++; // 4방향을 다 간 후 time 1 증가
				}
				}
				
			
			if (time != 0) {
				sb.append(time).append("\n");
			}
			else {
				sb.append(-1).append("\n");
			}
		}
		System.out.println(sb);	
	}
	
	static boolean isBoundary(int x, int y) {
		return x >= 0 && x < N && y >= 0 && y < N;
	}

}
