##생성자 - this 키워드: 참조 변수로써 객체 자신을 가리킴(로컬 변수와 이름이 충동하는 경우 사용)
this.변수 -> 멤버변수 / 생성자 내에서 변수 -> 로컬변수 => 구별해야함

생성자를 정의할 때 특별한 이유 없다면 기본 생성자도 같이 중복 정의해 주는 것을 권장

ex) public class Person{
  // 속성 - 멤버변수
  String name;
  int age;
  ...

public Person(String name, int age){
  // 로컬변수
  this.name = name;
  this.age = age;
  }
  ...
}

-- 메서드와 마찬가지로 생성자도 오버로딩 가능
-> 객체 생성 시 필요한 멤버 변수만 초기화 진행 -> 생성자 별 코드의 중복 발생

ex) public Person(String name){
  this(name, 0, false);
  }

-- 초기화 블록(Initializer)
생성자처럼 멤버 변수의 초기화를 목적으로 함 -> 클래스 초기화 블록, 인스턴스 초기화 블록

_____________________________________________________________________________________________________
OOP(객체 지향 언어)의 특징 -> A P I E
-- 추상화, 다형성, 상속, 데이터 은닉과 보호

## 상속(Inheritance): 기존(상위) 클래스의 자산(멤버)을 자식(하위) 클래스에서 재사용하기 위한 것
  -- 상위 클래스이 생성자와 초기화 블록은 상속 / 코드의 절감 / 유지 보수성 향상
  -- extends 키워드 사용

-- 메서드 선언 형식: 표준화(규칙)
    [modifiers] 반환타입 메서드이름 (매개변수타입 매개변수명, 매개변수타입 매개변수명)
        throws 예외클래스명1, 예외클래스명x {
        // 수행문
      } 

-- 재정의(Overriding)시 예외는 축소는 가능하지만 확대는 불가
-- Polymorphic Variable: 부모 타입(큰 타입)의 변수
-- this: 현재 객체를 지칭하는 참조변수, 객체 생성시 자동 제공
-- super: 현재 객체의 부모 객체를 지칭하는 참조변수, 객체 생성시 자동 제공
-- java.lang.Object: 
    >> 모든 클래스의 root class
    >> 자동으로 상속 받음: extends Object 필요X
    >> 주로 재정의 사용하는 메서드
        => toString(): String
        => equals(Object): boolean / hashCode(): int
        => getClass(): Class
-- modifiers
    >> access modifiers: 단일, public > protected > default(package) > private
    >> non-access modifiers(usage modifiers)
        => static: 멤버변수(class 변수, static 변수), 멤버메서드(class 메서드, static 메서드)
        => final: 멤버변수(변경불가), 매개변수(전달받은값변경불가), 메서드(재정의불가), 클래스(상속불가)
        => abstract

## java.lang.Object 클래스: 모든 클래스의 조상 클래스 / tree(계층) 구조
  -- 별도의 extends 선언이 없는 클래스들은 extends Object가 생략됨 -> Object에 정의된 메서드 가짐
** equals() 메서드 까먹지 말것!

- 상속의 관계는 is a (kind of) 관계라고 함
ex) Person in a Object, SpiderMan is a Person

- 자바는 *단일 상속(Single Inheritance)만 지원 => 대신 interface와 포함 관계(has a)로 단점 극복

- 포함 관계: 상속 이외에 클래스를 재활용하는 방법
  -- 2개 이상의 클래스에서 특성을 가져올 때 하나는 상속, 나머지는 멤버변수로 처리

- 메서드 오버라이딩(overriding): 조상 클래스에 정의된 메서드를 자식 클래스에서 적합하게 수정하는 것
  -- 오버라이딩의 조건
    -- 메서드 이름이 같아야 함
    -- 매개변수의 개수, 타입, 순서가 같아야 함
    -- 리턴 타입이 같아야 함
    -- 접근 제한자는 부보보다 범위가 넓거나 같아야 함
    -- 조상보다 더 큰 예외를 던질 수 X

## super 키워드
  -- 변수의 scope
    -- 사용된 위치에서 점점 확장해가며 처음 만난 선언부에 연결됨
    -- method 내부 -> 해당 클래스 멤버 변수 -> 조상 클래스 멤버 변수

  -- super()는 조상 클래스의 생성자를 호출
  
  -- 부모의 생성자를 명시적으로 지정:
	>> super(params)
	>> 자식 생성자에서 명시적으로 부모 생성자를 지정하지 않으면 자도응로 부모의 기본생성: super();
	>> 자식 객체의 생성자의 첫번째 수행문 위치: this와 super는 동시 사용 불가

-- final: 마지막, 더 이상 바뀔 수 없음
  -- final class - 더 이상 확장 X: 상속 금지 -> 오버라이드 방지
  -- final method - 더 이상 재정의 X: 오버라이드 금지

  -- final variable - 더 이상 값을 바꿀 수 없음(상수)
  -- blank final - 값이 할당되지 않은 멤버 변수
  -- static fianl

## 접근 제한자 (public, protected, package(default), private)

**** Exception 전까지가 과목평가 범위 담주 월 / 담주 금은 관통프로젝트


## 자바 소스파일의 구조
1. package 선언문
-- 형식: package top.sub;
-- 사용횟수: 0(default package), 1
-- 물리적으로 폴더 개념
-- 목적: 관련 클래스들의 효율적인 관리, 권한 제어, 이름 충돌 방지
-- 해당 회사(단체) url을 뒤집어서 사용함: 공개 시에 패키지 명 충돌 방지
  >> http://www.ssafy.com
  >> package com.ssafy.model;
-- 패키지 레벨: 2 ~ 4

2. import  선언문
-- 사용횟수: 0 ~ N
-- javac(컴파일), java(실행) 시에 현재 클래스에서 사용한 다른 클래스의 경로 지정
-- 생략 가능한 클래스 패키지:
    (1) java.lang.*: // sub-package는 포함하지 않음, 클래스에만 적용됨
    (2) same package: 
-- 소스코드 지정:
        (1) import java.util.*;
        (2) import java.util.ArrayList; (권장)
        (3) 동일한 이름의 클래스가 다른 패키지에 존재하는 경우
            => import 구문 대신에 클래스 명 앞에 패키지 명을 포함해서 지정해야함
            ex)
            import java.util.Date;
            import java.sql.Date;
            
            java.util.Date date = new java.util.Date();
            java.sql.Date date = new java.sql.Date();
-- javac(컴파일), java(실행) 시에 지정: classpath 경로 지정

3. class 선언문 
-- 사용횟수: 1 ~ N
    >> 다중 클래스 선언은 가능하지만 권장하지는 않음
    >> 테스트 시에 사용하기도 함
    >> 권장: 하나의 소스코드 파일 안에 하나의 클래스 선언: 파일명만 보고 클래스를 식별 가능
    >> 테스트 시에 사용하기도 함
-- 규칙:
    >> public 권한의 클래스는 0, 1: 1개 이상 올 수 없음
    >> public 클래스 존재 시에 파일 명은 반드시 public클래스이름.java
    >> publict 권한의 클래스가 없는 경우에 파일명은 마음대로 지정 가능함
    >> 보통 main(), 중심이 되는 클래스이름.java 주로 지정함

## class 구성요소
1. 멤버변수 선언문
2. 생성자 선언문: 기본생성자 > 매개변수 작은 개수 순서대로 구현
3. 멤버 메서드 선언문 

## MVC Pattern
-- Model
	>> 업무 처리 로직 (Business/Service/Process Logic)
	>> 데이터베이스 처리 로직: DAO(Data Access Object) Pattern 
	>> 데이터를 갖고 있는 객체(도메인): DTO(Data Transfer Object) Pattern
	
-- View
	>> 화면 처리 로직(Presentation Logic)
	>> UI(User Interface)
		=> CUI: Command Line UI (Java SE: java.io.*, java.util.Scanner)
		=> GUI: Graphic UI (Java SE: java.awt.*, java.swing.*, JavaEE: html/jsp)
-- Controller
	>> 요청 ~ 응답 제어: JavaEE(Servlet)
	>> 1. 요청파악
	>> 2. 요청데이터 가져오기
	>> 3. 요청데이터 검증
	>> 4. Model에게 요청 의뢰(검증 방는 요청 데이터 전달)
	>> 5. Model 요청 의뢰한 결과 받아서 응답하기
			=> 성공 응답
			=> 실패 응답

## MVC 기반의 package 구조
-- com.ssafy.model
-- com.ssfay.model.dto
-- com.ssafy.model.service
-- com.ssfay.model.dao

-- com.ssafy.view
-- com.ssafy.controller

-- com.ssafy.util
-- com.ssfay.exception


## 회원 관리 프로젝트
-- 객체 추출: 회원, 게시판, 공지, 상품 등

## 회원 객체 => 클래스(Abstraction)
1. 속성(멤버변수): 목록 추출, 타입, 제약 - 데이터 길이(이후DB와 연결), 순서...
-- 등급: 일반, 우수, 관리자 -> 미래 확장까지 생각해서 데이터 타입 고려 
-- 마일리지: 일반
...
-- 가입일의경우 고정형식이고 연산 안하면 String / 가변형식이고 연산 필요하면 Date

2. 기능(메서드)
-- 마일리지 정책: 회원가입, 로그인, 가입 1주년 등...
-- 전체회원 조회: 관리자
-- 우수회원 등업: 일반 100,000 이상, 담당자 배정, 마일리지 초기화
-- 담당자 랜덤 배정

## UML (Unified Modeling Language)
-- 객체 지향 분석 설계 표준 표기법
-- Class Diagram







회원관리 프로젝트
--- 객체 추출 : 회원, 게시판, 공지, 상품 등

회원(Member) 객체 => 클래스(Abstraction)
속성(멤버변수): 목록 추출, 타입, 제약, 길이, 순서
(grade)등급: 일반(G), 우수(S), 관리자(A) : String(확장성) / char
(mileage)마일리지: 일반 : int
(memberId)아이디 : String
(memberPw)비밀번호 : String
(name)이름 : String
(mobile)휴대폰: 010-1234-1234(형식-String), 01012341234(형식-String)
(email)이메일: String
(manager)담당자: String
(entryDate)가입일: String(고정형식, 연산하지않음) / Date(가변형식, 연산필요)
기능(메서드)
관리자회원 등록 초기화
마일리지정책: 회원가입, 로그인, 가입1주년 등
전체회원조회: 관리자(회원 비밀번호 * 대체 보안변환)
우수회원 등업: 일반 100,000 이상, 담당자배정, 마일리지 초기화
담당자 랜덤 배정
가입(아이디, 비밀번호)
로그인(아이디, 비밀번호)
내정보조회
비밀번호변경
내정보전체변경
비밀번호 보안문자 변환 : 공통 유틸 분리
비밀번호찾기(아이디, 이름, 휴대폰/이메일)
아이디찾기(이름, 휴대폰/이메일)
유틸 공통 클래스: Utility
보안문자 변환: 비밀번호, 이름, 휴대폰 등







_________________________________________________________________________________________________________________________
## 회원관리 프로젝트 요구사항

- 아래의 요구사항을 참고하여 회원 도메인 클래스를 설계(고민)해보세요.
- 회원의 속성 정보는 어떤것이 필요할까요?
- 회원을 관리하기 위한 서비스는 어떤것이 필요할까요?

회원관리시스템을 개발하고자 한다.(향후 웹 어플리케이션으로 확장 변경)
회원은 일반회원, 우수회원, 관리자회원으로 구분한다.
일반회원에게는 마일리지 정책에 따라 마일리지를 부여한다.
우수회원에게는 전용 담당자를 배정한다.
관리자 회원은 전체회원들의 정보를 관리한다.
일반회원의 마일리지가 100,000 이상이 되면 우수회원으로 자동 등업한다.
자동 등업시에 랜덤하게 관리자를 배정하며, 기존 마일리지는 초기화시킨다.
마일리지 정책을 세우고 구현한다.
일반, 우수회원은 가입후에 로그인을 통해서 내정보조회, 비밀번호 변경, 내정보전체변경 등의 기능을 사용할 수 있다.
관리자 회원은 초기화 데이터를 통해서 관리자 회원으로 등록(생성)하여 사용한다.
관리자 회원이 로그인을 하면 본인의 정보 조회, 변경등을 할 수 있으며, 전체회원의 정보를 조회 할 수 있다.
단, 관리자 회원이 전체회원의 정보를 조회할때 회원들의 비밀번호는 앞2자리만 보여주고 나머지는 * 문자로 대체하여 조회한다.
아이디 및 비밀번호를 잊어버린 회원을 위한 찾기 기능을 제공한다.
공통으로 사용하기 위한 유틸 기능은 분리하여 설계한다.
회원 관리를 위한 추가 기능을 설계한다.

속성 - 회원번호, 회원등급, 전용 담당자, 마일리지, 
서비스 - 마일리지 정책, 등업 서비스, 자동 관리자 배정 서비스, 

