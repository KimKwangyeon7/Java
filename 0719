##생성자 - this 키워드: 참조 변수로써 객체 자신을 가리킴(로컬 변수와 이름이 충동하는 경우 사용)
this.변수 -> 멤버변수 / 생성자 내에서 변수 -> 로컬변수 => 구별해야함

생성자를 정의할 때 특별한 이유 없다면 기본 생성자도 같이 중복 정의해 주는 것을 권장

ex) public class Person{
  // 속성 - 멤버변수
  String name;
  int age;
  ...

public Person(String name, int age){
  // 로컬변수
  this.name = name;
  this.age = age;
  }
  ...
}

-- 메서드와 마찬가지로 생성자도 오버로딩 가능
-> 객체 생성 시 필요한 멤버 변수만 초기화 진행 -> 생성자 별 코드의 중복 발생

ex) public Person(String name){
  this(name, 0, false);
  }

-- 초기화 블록(Initializer)
생성자처럼 멤버 변수의 초기화를 목적으로 함 -> 클래스 초기화 블록, 인스턴스 초기화 블록

_____________________________________________________________________________________________________
OOP(객체 지향 언어)의 특징 -> A P I E
-- 추상화, 다형성, 상속, 데이터 은닉과 보호

## 상속(Inheritance): 기존(상위) 클래스의 자산(멤버)을 자식(하위) 클래스에서 재사용하기 위한 것
  -- 상위 클래스이 생성자와 초기화 블록은 상속 / 코드의 절감 / 유지 보수성 향상
  -- extends 키워드 사용

-- 메서드 선언 형식: 표준화(규칙)
    [modifiers] 반환타입 메서드이름 (매개변수타입 매개변수명, 매개변수타입 매개변수명)
        throws 예외클래스명1, 예외클래스명x {
        // 수행문
      } 

-- 재정의(Overriding)시 예외는 축소는 가능하지만 확대는 불가
-- Polymorphic Variable: 부모 타입(큰 타입)의 변수
-- this: 현재 객체를 지칭하는 참조변수, 객체 생성시 자동 제공
-- super: 현재 객체의 부모 객체를 지칭하는 참조변수, 객체 생성시 자동 제공
-- java.lang.Object: 
    >> 모든 클래스의 root class
    >> 자동으로 상속 받음: extends Object 필요X
    >> 주로 재정의 사용하는 메서드
        => toString(): String
        => equals(Object): boolean / hashCode(): int
        => getClass(): Class
-- modifiers
    >> access modifiers: 단일, public > protected > default(package) > private
    >> non-access modifiers(usage modifiers)
        => static: 멤버변수(class 변수, static 변수), 멤버메서드(class 메서드, static 메서드)
        => final: 멤버변수(변경불가), 매개변수(전달받은값변경불가), 메서드(재정의불가), 클래스(상속불가)
        => abstract

## java.lang.Object 클래스: 모든 클래스의 조상 클래스 / tree(계층) 구조
  -- 별도의 extends 선언이 없는 클래스들은 extends Object가 생략됨 -> Object에 정의된 메서드 가짐
** equals() 메서드 까먹지 말것!

- 상속의 관계는 is a (kind of) 관계라고 함
ex) Person in a Object, SpiderMan is a Person

- 자바는 *단일 상속(Single Inheritance)만 지원 => 대신 interface와 포함 관계(has a)로 단점 극복

- 포함 관계: 상속 이외에 클래스를 재활용하는 방법
  -- 2개 이상의 클래스에서 특성을 가져올 때 하나는 상속, 나머지는 멤버변수로 처리

- 메서드 오버라이딩(overriding): 조상 클래스에 정의된 메서드를 자식 클래스에서 적합하게 수정하는 것
  -- 오버라이딩의 조건
    -- 메서드 이름이 같아야 함
    -- 매개변수의 개수, 타입, 순서가 같아야 함
    -- 리턴 타입이 같아야 함
    -- 접근 제한자는 부보보다 범위가 넓거나 같아야 함
    -- 조상보다 더 큰 예외를 던질 수 X

## super 키워드
  -- 변수의 scope
    -- 사용된 위치에서 점점 확장해가며 처음 만난 선언부에 연결됨
    -- method 내부 -> 해당 클래스 멤버 변수 -> 조상 클래스 멤버 변수

  -- super()는 조상 클래스의 생성자를 호출


-- final: 마지막, 더 이상 바뀔 수 없음
  -- final class - 더 이상 확장 X: 상속 금지 -> 오버라이드 방지
  -- final method - 더 이상 재정의 X: 오버라이드 금지

  -- final variable - 더 이상 값을 바꿀 수 없음(상수)
  -- blank final - 값이 할당되지 않은 멤버 변수
  -- static fianl

## 접근 제한자 (public, protected, package(default), private)

**** Exception 전까지가 과목평가 범위 담주 월 / 담주 금은 관통프로젝트

