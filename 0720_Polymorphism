## 데이터 은닉과 보호 (Encapsulation)
-- 정보 보호를 위한 대책
	>> private으로 바꾸기
	>> 공개되는 메서드를 통한 접근 통로 마련: setter / getter

## 객체 생성 제어와 Singleton 디자인 패턴
-- 여러 개의 객체가 필요 없는 경우
	>> 객체를 구별할 필요 X == 수정 가능한 멤버 변수가 없고 기능만 있는 경우 => stateless한 객체
	>> 객체를 계속 생성/삭제 하는데 많은 비용이 들어 재사용이 유리한 경우

## 다형성 (Polymorphism)
-- 하나의 객체가 많은 형(타입)을 가질 수 있는 성질
ex) 황금 잉어빵 is a 붕어빵: 상속 관계
-- 상속 관계에 있을 때 조상 클래스의 타입으로 자식 클래스 객체를 레퍼런스 할 수 있다.


## 정적 바인딩과 동적 바인딩
-- 정적: 컴파일 단계에서 참조 변수의 타입에 따라 연결이 달라짐 / 상속 관계에서 객체의 멤버 변수가 중복될 때 또는 static method
-- 동적: 다형성을 이용해 메서드 호출이 발생할 때 runtime에 메모리의 실제 객체의 타입으로 결정 / 


